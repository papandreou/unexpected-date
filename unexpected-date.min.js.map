{"version":3,"file":"unexpected-date.min.js","sources":["lib/helpers.js","lib/unexpected-date.js"],"sourcesContent":["var exports = {};\n\nfunction isEqualDate(dateA, dateB) {\n  return (\n    dateA.getUTCFullYear() === dateB.getUTCFullYear()\n    && dateA.getUTCMonth() === dateB.getUTCMonth()\n    && dateA.getUTCDate() === dateB.getUTCDate()\n    && dateA.getTimezoneOffset() === dateB.getTimezoneOffset()\n  );\n}\nexports.isEqualDate = isEqualDate;\n\nfunction isEqualDateTime(dateA, dateB) {\n  return dateA.getTime() === dateB.getTime();\n}\nexports.isEqualDateTime = isEqualDateTime;\n\nfunction isAfter(dateA, dateB) {\n  return dateA.getTime() > dateB.getTime();\n}\nexports.isAfter = isAfter;\n\nfunction isBefore(dateA, dateB) {\n  return dateA.getTime() < dateB.getTime();\n}\nexports.isBefore = isBefore;\n\nfunction isBetween(date, start, end) {\n  return isAfter(date, start) && isBefore(date, end);\n}\nexports.isBetween = isBetween;\n\nmodule.exports = exports;\n","var helpers = require('./helpers');\n\nmodule.exports = {\n  name: 'unexpected-date',\n  installInto: function(expect) {\n    expect.addAssertion('<date> [not] to be after <date>', function(expect, subject, value) {\n      return expect(helpers.isAfter(subject, value), '[not] to be true');\n    });\n\n    expect.addAssertion('<date> [not] to be before <date>', function(expect, subject, value) {\n      return expect(helpers.isBefore(subject, value), '[not] to be true');\n    });\n\n    expect.addAssertion('<date> [not] to equal time <date>', function(expect, subject, value) {\n      return expect(helpers.isEqualDateTime(subject, value), '[not] to be true');\n    });\n\n    expect.addAssertion('<date> [not] to equal date <date>', function(expect, subject, value) {\n      return expect(helpers.isEqualDate(subject, value), '[not] to be true');\n    });\n\n    expect.addAssertion('<date> [not] to be same or after <date>', function(expect, subject, value) {\n      return expect(\n        helpers.isAfter(subject, value) || helpers.isEqualDateTime(subject, value),\n        '[not] to be true'\n      );\n    });\n\n    expect.addAssertion('<date> [not] to be close to <date> <number?>', function(expect, subject, value, epsilon) {\n      expect.errorMode = 'bubble';\n      if (typeof epsilon !== 'number') {\n        epsilon = 1000;\n      }\n\n      expect.withError(function() {\n        expect(\n          subject.getTime(),\n          '[not] to be close to',\n          value.getTime(),\n          epsilon\n        );\n      }, function() {\n        expect.fail(function(output) {\n          output.error('expected ')\n            .appendInspected(subject).nl()\n            .error(expect.testDescription).sp()\n            .appendInspected(value).sp()\n            .text('(epsilon: ')\n            .jsNumber(epsilon.toExponential())\n            .text(')');\n        });\n      });\n    });\n\n    expect.addAssertion('<date> [not] to be same or before <date>', function(expect, subject, value) {\n      return expect(\n        helpers.isBefore(subject, value) || helpers.isEqualDateTime(subject, value),\n        '[not] to be true'\n      );\n    });\n\n    expect.addAssertion('<date> [not] to be [inclusively] between <date> <date>', function(expect, subject, start, end) {\n      expect.argsOutput = function(output) {\n        output.append(function(output) {\n          output.appendInspected(start);\n          output.text(' and ');\n          output.appendInspected(end);\n        });\n      };\n\n      var isBetween = expect.flags.inclusively === true\n        ? helpers.isBetween(subject, start, end) || (helpers.isEqualDateTime(subject, start) || helpers.isEqualDateTime(subject, end))\n        : helpers.isBetween(subject, start, end);\n\n      return expect(isBetween, '[not] to be true');\n    });\n  }\n};\n"],"names":["dateA","dateB","getUTCFullYear","getUTCMonth","getUTCDate","getTimezoneOffset","getTime","isAfter","isBefore","date","start","end","name","installInto","expect","addAssertion","subject","value","helpers","isEqualDateTime","isEqualDate","epsilon","errorMode","withError","fail","output","error","appendInspected","nl","testDescription","sp","text","jsNumber","toExponential","argsOutput","append","flags","inclusively","isBetween"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;iMAUA,MARA,SAAqBA,EAAOC,GAC1B,OACED,EAAME,mBAAqBD,EAAMC,kBAC9BF,EAAMG,gBAAkBF,EAAME,eAC9BH,EAAMI,eAAiBH,EAAMG,cAC7BJ,EAAMK,sBAAwBJ,EAAMI,qBAQ3C,MAHA,SAAyBL,EAAOC,GAC9B,OAAOD,EAAMM,YAAcL,EAAMK,WAInC,SAASC,EAAQP,EAAOC,GACtB,OAAOD,EAAMM,UAAYL,EAAMK,UAEjC,MAAkBC,EAElB,SAASC,EAASR,EAAOC,GACvB,OAAOD,EAAMM,UAAYL,EAAMK,UAEjC,MAAmBE,EAKnB,MAHA,SAAmBC,EAAMC,EAAOC,GAC9B,OAAOJ,EAAQE,EAAMC,IAAUF,EAASC,EAAME,2FCzB9CC,KAAM,kBACNC,YAAa,SAASC,GACpBA,EAAOC,aAAa,kCAAmC,SAASD,EAAQE,EAASC,GAC/E,OAAOH,EAAOI,EAAQX,QAAQS,EAASC,GAAQ,sBAGjDH,EAAOC,aAAa,mCAAoC,SAASD,EAAQE,EAASC,GAChF,OAAOH,EAAOI,EAAQV,SAASQ,EAASC,GAAQ,sBAGlDH,EAAOC,aAAa,oCAAqC,SAASD,EAAQE,EAASC,GACjF,OAAOH,EAAOI,EAAQC,gBAAgBH,EAASC,GAAQ,sBAGzDH,EAAOC,aAAa,oCAAqC,SAASD,EAAQE,EAASC,GACjF,OAAOH,EAAOI,EAAQE,YAAYJ,EAASC,GAAQ,sBAGrDH,EAAOC,aAAa,0CAA2C,SAASD,EAAQE,EAASC,GACvF,OAAOH,EACLI,EAAQX,QAAQS,EAASC,IAAUC,EAAQC,gBAAgBH,EAASC,GACpE,sBAIJH,EAAOC,aAAa,+CAAgD,SAASD,EAAQE,EAASC,EAAOI,GACnGP,EAAOQ,UAAY,SACI,iBAAZD,IACTA,EAAU,KAGZP,EAAOS,UAAU,WACfT,EACEE,EAAQV,UACR,uBACAW,EAAMX,UACNe,IAED,WACDP,EAAOU,KAAK,SAASC,GACnBA,EAAOC,MAAM,aACVC,gBAAgBX,GAASY,KACzBF,MAAMZ,EAAOe,iBAAiBC,KAC9BH,gBAAgBV,GAAOa,KACvBC,KAAK,cACLC,SAASX,EAAQY,iBACjBF,KAAK,WAKdjB,EAAOC,aAAa,2CAA4C,SAASD,EAAQE,EAASC,GACxF,OAAOH,EACLI,EAAQV,SAASQ,EAASC,IAAUC,EAAQC,gBAAgBH,EAASC,GACrE,sBAIJH,EAAOC,aAAa,yDAA0D,SAASD,EAAQE,EAASN,EAAOC,GAa7G,OAZAG,EAAOoB,WAAa,SAAST,GAC3BA,EAAOU,OAAO,SAASV,GACrBA,EAAOE,gBAAgBjB,GACvBe,EAAOM,KAAK,SACZN,EAAOE,gBAAgBhB,MAQpBG,GAJsC,IAA7BA,EAAOsB,MAAMC,YACzBnB,EAAQoB,UAAUtB,EAASN,EAAOC,IAASO,EAAQC,gBAAgBH,EAASN,IAAUQ,EAAQC,gBAAgBH,EAASL,GACvHO,EAAQoB,UAAUtB,EAASN,EAAOC,GAEb"}